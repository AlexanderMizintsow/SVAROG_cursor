const net = require('net')
const iconv = require('iconv-lite')
const dbPool = require('../../database/db')
const { createReminder } = require('../../helpers/api')

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ api.js)
async function runWithTimeout(fn, timeoutMs, taskName) {
  let timeout
  let isCompleted = false

  try {
    const taskPromise = fn()
    const timeoutPromise = new Promise((_, reject) => {
      timeout = setTimeout(() => {
        if (!isCompleted) {
          isCompleted = true
          reject(new Error(`–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ${taskName} (${timeoutMs}ms)`))
        }
      }, timeoutMs)
    })

    const result = await Promise.race([taskPromise, timeoutPromise])
    isCompleted = true
    return result
  } catch (error) {
    isCompleted = true
    throw error
  } finally {
    if (timeout) {
      clearTimeout(timeout)
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ 1–° (—Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)
async function getOrders1C(sScan, testMode = true) {
  if (testMode) {
    console.log('[TEST] –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ 1–°')
    return Promise.resolve([
      {
        orderNumber: '12531072383311',
        companyName: '–ê–±–¥—É–ª–ª–∏–Ω–∞ –î.–ò. –ò–ü',
        inn: '7777777',
        shippingDate: '25.08.2025',
        address:
          '442585, –ü–µ–Ω–∑–µ–Ω—Å–∫–∞—è –æ–±–ª, –°–æ—Å–Ω–æ–≤–æ–±–æ—Ä—Å–∫–∏–π —Ä-–Ω, –ò–Ω–¥–µ—Ä–∫–∞ —Å, –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —É–ª, –¥–æ–º ‚Ññ 48',
      },
      {
        orderNumber: '189533',
        companyName: '–ê–±–¥—É–ª–ª–∏–Ω–∞ –î.–ò. –ò–ü',
        inn: '7777777',
        shippingDate: '27.08.2025',
        address:
          '442585, –ü–µ–Ω–∑–µ–Ω—Å–∫–∞—è –æ–±–ª, –°–æ—Å–Ω–æ–≤–æ–±–æ—Ä—Å–∫–∏–π —Ä-–Ω, –ò–Ω–¥–µ—Ä–∫–∞ —Å, –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —É–ª, –¥–æ–º ‚Ññ 48',
      },
      {
        orderNumber: '3833050732833',
        companyName: '–ñ–µ–≤–ª–∞–∫–æ–≤ –î.–ï. –ò–ü',
        inn: '7777777',
        shippingDate: '25.08.2025',
        address: '412310, –í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª, –í–æ–ª–≥–æ–≥—Ä–∞–¥ –≥, –∏–º –ù–∏–∫–æ–ª–∞—è –û—Ç—Ä–∞–¥—ã —É–ª, –¥–æ–º ‚Ññ 22, –∫–≤.127',
      },
    ])
  }

  // –ù–∞—Å—Ç–æ—è—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ 1–° (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞)

  return new Promise((resolve, reject) => {
    const client = new net.Socket()

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
    client.setTimeout(10000) // 10 —Å–µ–∫—É–Ω–¥

    client.connect(8240, '192.168.57.77', () => {
      console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å —Å–µ—Ä–≤–µ—Ä–æ–º.')
      const message = `Q11\x01EB35000999\x02\t${sScan}\r`
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:', message)
      console.log('–ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', iconv.encode(message, 'windows-1251'))
      client.write(iconv.encode(message, 'windows-1251'))
    })

    client.on('data', (data) => {
      console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞!')
      console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:', data)

      const decodedData = iconv.decode(data, 'windows-1251')
      console.log('–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', decodedData)

      // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
      const orders = parseOrdersData(decodedData)
      resolve(orders)
      client.destroy()
    })

    client.on('timeout', () => {
      console.log('–¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª')
      client.destroy()
      reject(new Error('–¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'))
    })

    client.on('error', (err) => {
      console.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${err.message}`)
      reject(err)
    })

    client.on('close', (hadError) => {
      console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.', hadError ? '–° –æ—à–∏–±–∫–æ–π' : '–ù–æ—Ä–º–∞–ª—å–Ω–æ')
    })

    client.on('end', () => {
      console.log('–°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ')
    })
  })
}

// –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞ 1–°
function parseOrdersData(data) {
  const lines = data.split('\n').filter((line) => line.trim() !== '')
  const orders = []

  lines.forEach((line) => {
    if (line.startsWith('s;')) {
      const cleanLine = line.substring(2)
      const parts = cleanLine.split(':')

      if (parts.length >= 5) {
        const orderNumber = parts[0].trim()
        const companyName = parts[1].trim()
        const inn = parts[2].trim()
        const shippingDate = parts[3].trim()
        const address = parts.slice(4).join(':').trim()

        if (orderNumber && companyName && shippingDate) {
          orders.push({
            orderNumber,
            companyName,
            inn: inn === '–Ω–µ—Ç' ? null : inn,
            shippingDate,
            address: address || '–ù–µ —É–∫–∞–∑–∞–Ω',
          })
        }
      }
    }
  })

  return orders
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–∞—Ç–µ (—Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã –Ω–∞ –≤—Ç–æ—Ä–æ–π –¥–µ–Ω—å)
function filterOrdersByDate(orders) {
  const today = new Date()
  const targetDate = new Date(today)
  targetDate.setDate(today.getDate() + 2)

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const targetDateStr = targetDate.toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
  })

  return orders.filter((order) => order.shippingDate === targetDateStr)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ –ë–î
async function checkExistingOrders(orders) {
  const orderNumbers = orders.map((order) => order.orderNumber)

  try {
    const { rows } = await dbPool.query(
      `SELECT order_number, shipping_date, notification_sent 
       FROM orders_1c 
       WHERE order_number = ANY($1)`,
      [orderNumbers]
    )

    const existingOrders = new Map(rows.map((row) => [row.order_number, row]))

    return orders.filter((order) => {
      const existing = existingOrders.get(order.orderNumber)
      if (!existing) return true // –ù–æ–≤—ã–π –∑–∞–∫–∞–∑

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –¥–∞—Ç–∞
      const existingDate = new Date(existing.shipping_date)
      const newDate = parseDate(order.shippingDate)

      if (existingDate.getTime() !== newDate.getTime()) {
        // –î–∞—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ
        return true
      }

      // –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
      return !existing.notification_sent
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤:', error)
    return orders
  }
}

// –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ DD.MM.YYYY
function parseDate(dateStr) {
  const [day, month, year] = dateStr.split('.')
  return new Date(parseInt(year), parseInt(month) - 1, parseInt(day))
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –≤ –ë–î
async function saveOrdersToDatabase(orders) {
  if (orders.length === 0) return

  for (const order of orders) {
    try {
      const parsedDate = parseDate(order.shippingDate)

      await dbPool.query(
        `INSERT INTO orders_1c (order_number, company_name, inn, shipping_date, address)
         VALUES ($1, $2, $3, $4, $5)
         ON CONFLICT (order_number) 
         DO UPDATE SET 
           company_name = EXCLUDED.company_name,
           inn = EXCLUDED.inn,
           shipping_date = EXCLUDED.shipping_date,
           address = EXCLUDED.address,
           updated_at = NOW()`,
        [order.orderNumber, order.companyName, order.inn, parsedDate, order.address]
      )
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ${order.orderNumber}:`, error)
    }
  }
}

// –ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ò–ù–ù
async function findCompanyByINN(inn) {
  if (!inn) return null

  try {
    const { rows } = await dbPool.query('SELECT * FROM companies WHERE inn = $1 LIMIT 1', [inn])
    return rows[0] || null
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ò–ù–ù:', error)
    return null
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ chat_id –∫–æ–º–ø–∞–Ω–∏–∏
async function getCompanyChatId(companyId) {
  try {
    const { rows } = await dbPool.query(
      'SELECT chat_id FROM user_company_tg_bot WHERE company_id = $1 LIMIT 1',
      [companyId]
    )
    return rows[0]?.chat_id || null
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è chat_id –∫–æ–º–ø–∞–Ω–∏–∏:', error)
    return null
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ
function formatOrderMessage(order) {
  return {
    text:
      `üì¶ *–ó–∞–∫–∞–∑ ‚Ññ${order.orderNumber}*\n\n` +
      `üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* ${order.companyName}\n` +
      `üìÖ *–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏:* ${order.shippingDate}\n` +
      `üìç *–ê–¥—Ä–µ—Å:* ${order.address}\n\n` +
      `‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –û—Ç–≤–µ—Ç—å—Ç–µ –¥–æ 12:00 –¥–Ω—è!`,
    options: {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–∞—Ç—É', callback_data: `confirm_order_${order.orderNumber}` },
            { text: 'üìÖ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –¥–∞—Ç—É', callback_data: `reschedule_order_${order.orderNumber}` },
          ],
        ],
      },
    },
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–∏–ª–µ—Ä–∞–º
async function sendOrderNotifications(bot, orders) {
  const results = []

  for (const order of orders) {
    try {
      // –ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ò–ù–ù
      let company = null
      if (order.inn) {
        company = await findCompanyByINN(order.inn)
      }

      if (!company) {
        console.log(`–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order.orderNumber} (–ò–ù–ù: ${order.inn})`)
        results.push({
          orderNumber: order.orderNumber,
          success: false,
          error: 'Company not found',
        })
        continue
      }

      // –ü–æ–ª—É—á–µ–Ω–∏–µ chat_id
      const chatId = await getCompanyChatId(company.id)
      if (!chatId) {
        console.log(`–ù–µ—Ç chat_id –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${company.name_companies}`)
        results.push({
          orderNumber: order.orderNumber,
          success: false,
          error: 'No chat_id',
        })
        continue
      }

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageData = formatOrderMessage(order)
      const sentMessage = await bot.sendMessage(chatId, messageData.text, messageData.options)

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î
      await dbPool.query(
        `UPDATE orders_1c 
         SET notification_sent = TRUE, notification_sent_at = NOW()
         WHERE order_number = $1`,
        [order.orderNumber]
      )

      console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –∑–∞–∫–∞–∑ ${order.orderNumber} ‚Üí ${company.name_companies}`)
      results.push({
        orderNumber: order.orderNumber,
        success: true,
        chatId: chatId,
      })
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order.orderNumber}:`, error)
      results.push({
        orderNumber: order.orderNumber,
        success: false,
        error: error.message,
      })
    }
  }

  return results
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤
async function processOrders1C(bot) {
  try {
    console.log('[ORDERS_1C] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤ 1–°...')

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
    const orders = await getOrders1C('V0O', false) // true –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    console.log(`[ORDERS_1C] –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${orders.length}`)

    if (orders.length === 0) {
      console.log('[ORDERS_1C] –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
      return
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ (—Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã –Ω–∞ –≤—Ç–æ—Ä–æ–π –¥–µ–Ω—å)
    const filteredOrders = filterOrdersByDate(orders)
    console.log(`[ORDERS_1C] –ó–∞–∫–∞–∑–æ–≤ –Ω–∞ –≤—Ç–æ—Ä–æ–π –¥–µ–Ω—å: ${filteredOrders.length}`)

    if (filteredOrders.length === 0) {
      console.log('[ORDERS_1C] –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –≤—Ç–æ—Ä–æ–π –¥–µ–Ω—å')
      return
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤
    const newOrders = await checkExistingOrders(filteredOrders)
    console.log(`[ORDERS_1C] –ù–æ–≤—ã—Ö/–∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${newOrders.length}`)

    if (newOrders.length === 0) {
      console.log('[ORDERS_1C] –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
      return
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    await saveOrdersToDatabase(newOrders)
    console.log('[ORDERS_1C] –ó–∞–∫–∞–∑—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î')

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const results = await sendOrderNotifications(bot, newOrders)

    const successful = results.filter((r) => r.success).length
    console.log(`[ORDERS_1C] –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç: ${successful}/${newOrders.length} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`)
    console.log('[ORDERS_1C] –î–µ—Ç–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', results)
  } catch (error) {
    console.error('[ORDERS_1C] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ cron-–∑–∞–¥–∞—á–∏
function initOrders1CCron(bot, cronManager) {
  console.log('[CRON][INIT] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤ 1–°...')

  const task = async () => {
    const timestamp = new Date().toISOString()
    console.log(`[CRON][V0O][${timestamp}] –°—Ç–∞—Ä—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤ 1–°...`)

    const TASK_TIMEOUT = 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç

    try {
      await runWithTimeout(
        async () => {
          console.log('[CRON][V0O] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤...')
          await processOrders1C(bot)
          console.log('[CRON][V0O] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
        },
        TASK_TIMEOUT,
        'Orders 1C Check'
      )
    } catch (error) {
      console.error(`[CRON][V0O][ERROR] ${error.message}`)
      console.error(error.stack)

      console.error(`[CRON][V0O][${timestamp}] –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:`, {
        error: error.message,
        stack: error.stack,
        timestamp: timestamp,
      })

      throw error
    } finally {
      console.log(`[CRON][V0O][${timestamp}] –ó–∞–≤–µ—Ä—à–µ–Ω–æ`)
    }
  }

  // Cron-–∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–¥–Ω–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–∫–∞–∂–¥—ã–π —á–∞—Å —Å 12:00  )
  const lateResponseTask = async () => {
    const timestamp = new Date().toISOString()
    console.log(`[CRON][LATE_RESPONSE][${timestamp}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–¥–Ω–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤...`)

    try {
      const { checkAndBlockLateResponses } = require('./orderHandlers')
      await checkAndBlockLateResponses(bot)
      console.log('[CRON][LATE_RESPONSE] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    } catch (error) {
      console.error(`[CRON][LATE_RESPONSE][ERROR] ${error.message}`)
    } finally {
      console.log(`[CRON][LATE_RESPONSE][${timestamp}] –ó–∞–≤–µ—Ä—à–µ–Ω–æ`)
    }
  }

  if (cronManager) {
    const mainJob = cronManager.addJob('orders1c', '0 9 * * *', task) // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 —É—Ç—Ä–∞
    const lateResponseJob = cronManager.addJob(
      'orders1c_late_response',
      '0 12 * * *',
      lateResponseTask
    ) // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00 –¥–Ω—è

    return { mainJob, lateResponseJob }
  } else {
    // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É —Å–ø–æ—Å–æ–±—É –µ—Å–ª–∏ CronManager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
    const cron = require('node-cron')
    const mainJob = cron.schedule('0 9 * * *', task, {
      scheduled: true,
      timezone: 'Europe/Moscow',
    })

    const lateResponseJob = cron.schedule('0 12 * * *', lateResponseTask, {
      scheduled: true,
      timezone: 'Europe/Moscow',
    })

    mainJob.on('error', (error) => {
      console.error('[CRON][V0O][CRON_ERROR] –û—à–∏–±–∫–∞ –≤ cron-–∑–∞–¥–∞—á–µ:', error)
    })

    lateResponseJob.on('error', (error) => {
      console.error('[CRON][LATE_RESPONSE][CRON_ERROR] –û—à–∏–±–∫–∞ –≤ cron-–∑–∞–¥–∞—á–µ:', error)
    })

    return { mainJob, lateResponseJob }
  }
}

module.exports = {
  getOrders1C,
  processOrders1C,
  initOrders1CCron,
  filterOrdersByDate,
  checkExistingOrders,
  saveOrdersToDatabase,
  sendOrderNotifications,
  parseOrdersData,
  parseDate,
}
