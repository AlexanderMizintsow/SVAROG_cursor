const dbPool = require('../../database/db')
const { createReminder, getMppByCompany } = require('../../helpers/api')

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞—Ç—ã –∑–∞–∫–∞–∑–∞
async function handleOrderConfirm(bot, chatId, callbackQuery, orderNumber, userSessions) {
  try {
    console.log(`[ORDER_CONFIRM] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ${orderNumber} –æ—Ç ${chatId}`)

    if (!orderNumber) {
      console.error(`[ORDER_CONFIRM] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞`)
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞',
        show_alert: true,
      })
      return
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏
    const companyResult = await dbPool.query(
      `SELECT c.*, uctb.chat_id 
       FROM companies c 
       JOIN user_company_tg_bot uctb ON c.id = uctb.company_id 
       WHERE uctb.chat_id = $1`,
      [chatId]
    )

    if (companyResult.rows.length === 0) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
        show_alert: true,
      })
      return
    }

    const company = companyResult.rows[0]

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    await dbPool.query(
      `UPDATE orders_1c 
       SET dealer_response_received = TRUE, 
           dealer_response_at = NOW(),
           dealer_response_type = 'confirm'
       WHERE order_number = $1`,
      [orderNumber]
    )

    // –ü–æ–ª—É—á–∞–µ–º userId –¥–ª—è –ú–ü–ü
    let userId
    try {
      userId = await getMppByCompany(company.id)
    } catch (error) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å userId –¥–ª—è –ú–ü–ü:', error.message)
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ú–ü–ü',
        show_alert: true,
      })
      return
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ú–ü–ü
    await createReminder({
      newRecordId: -1,
      userId: userId,
      textCalc: `–î–∏–ª–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –¥–∞—Ç—É –æ—Ç–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ${orderNumber}`,
      typeReminders: 'orders_1c',
      priority: '—Å—Ä–µ–¥–Ω–∏–π',
      title: `–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ *${company.name_companies}*. –ó–∞–∫–∞–∑ ‚Ññ${orderNumber}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å tg: (id:${chatId})`,
      tags: [
        { title: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ', color: '#28a745' },
        { title: 'Telegram', color: '#007bff' },
      ],
      links: [],
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.editMessageReplyMarkup(
      { inline_keyboard: [] },
      {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
      }
    )

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚úÖ –î–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ú–ü–ü —É–≤–µ–¥–æ–º–ª–µ–Ω.',
      show_alert: false,
    })

    await bot.sendMessage(
      chatId,
      `‚úÖ –ó–∞–∫–∞–∑ ‚Ññ${orderNumber} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n` + `–ú–ü–ü —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏.`
    )
  } catch (error) {
    console.error(`[ORDER_CONFIRM] –û—à–∏–±–∫–∞:`, error)
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏',
      show_alert: true,
    })
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å –¥–∞—Ç—ã
async function handleOrderReschedule(bot, chatId, callbackQuery, orderNumber, userSessions) {
  try {
    console.log(`[ORDER_RESCHEDULE] –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–∫–∞–∑–∞ ${orderNumber} –æ—Ç ${chatId}`)

    if (!orderNumber) {
      console.error(`[ORDER_RESCHEDULE] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞`)
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞',
        show_alert: true,
      })
      return
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∫–∞–∫ –±–∞–∑–æ–≤—É—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
    const currentDate = new Date()

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–ª–∏–∂–∞–π—à–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–∞—Ç—ã (—á–µ—Ä–µ–∑ 2 –¥–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    function getNextAvailableDate(baseDate) {
      let targetDate = new Date(baseDate.getTime())

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É, –ø—Ä–æ–ø—É—Å–∫–∞—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
      let daysAdded = 0
      while (daysAdded < 2) {
        targetDate.setDate(targetDate.getDate() + 1)

        // –ï—Å–ª–∏ –¥–µ–Ω—å –Ω–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ
        if (targetDate.getDay() !== 0) {
          daysAdded++
        }
      }

      return targetDate
    }

    const nearestAvailableDate = getNextAvailableDate(currentDate)

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏ (–Ω–µ —Ä–∞–Ω–µ–µ —Ç–µ–∫—É—â–µ–π, –Ω–µ –ø–æ–∑–¥–Ω–µ–µ +2 –Ω–µ–¥–µ–ª–∏, –∏—Å–∫–ª—é—á–∞—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    const dateButtons = generateDateButtons(currentDate)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    if (!userSessions[chatId]) userSessions[chatId] = {}
    userSessions[chatId].awaitingDateSelection = {
      orderNumber,
      type: 'reschedule',
    }

    console.log(`[ORDER_RESCHEDULE] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Å–µ—Å—Å–∏–∏: orderNumber=${orderNumber}`)
    console.log(
      `[ORDER_RESCHEDULE] awaitingDateSelection:`,
      JSON.stringify(userSessions[chatId].awaitingDateSelection, null, 2)
    )
    console.log(`[ORDER_RESCHEDULE] –ü–æ–ª–Ω–∞—è —Å–µ—Å—Å–∏—è:`, JSON.stringify(userSessions[chatId], null, 2))

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã
    const dateSelectionMessage = await bot.editMessageText(
      `üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –æ—Ç–≥—Ä—É–∑–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ${orderNumber}:*\n\n` +
        `‚ö†Ô∏è **–ë–ª–∏–∂–∞–π—à–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –¥–∞—Ç–∞:** ${nearestAvailableDate.toLocaleDateString('ru-RU')}\n\n` +
        `üîΩ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:*`,
      {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: dateButtons,
        },
      }
    )

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    if (!userSessions[chatId]) userSessions[chatId] = {}
    userSessions[chatId].dateSelectionMessageId = callbackQuery.message.message_id

    await bot.answerCallbackQuery(callbackQuery.id)
  } catch (error) {
    console.error(`[ORDER_RESCHEDULE] –û—à–∏–±–∫–∞:`, error)
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–µ—Ä–µ–Ω–æ—Å–∞',
      show_alert: true,
    })
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —Å –¥–∞—Ç–∞–º–∏
function generateDateButtons(currentDate) {
  const buttons = []
  let currentRow = []

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–ª–∏–∂–∞–π—à–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–∞—Ç—ã (—á–µ—Ä–µ–∑ 2 –¥–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
  function getNextAvailableDate(baseDate) {
    let targetDate = new Date(baseDate.getTime())

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É, –ø—Ä–æ–ø—É—Å–∫–∞—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    let daysAdded = 0
    while (daysAdded < 2) {
      targetDate.setDate(targetDate.getDate() + 1)

      // –ï—Å–ª–∏ –¥–µ–Ω—å –Ω–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ
      if (targetDate.getDay() !== 0) {
        daysAdded++
      }
    }

    return targetDate
  }

  // –ü–æ–ª—É—á–∞–µ–º –±–ª–∏–∂–∞–π—à—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É
  let startDate = getNextAvailableDate(currentDate)

  console.log(`[GENERATE_BUTTONS] –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: ${currentDate.toLocaleDateString('ru-RU')}`)
  console.log(
    `[GENERATE_BUTTONS] –ë–ª–∏–∂–∞–π—à–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –¥–∞—Ç–∞: ${startDate.toLocaleDateString('ru-RU')}`
  )

  for (let i = 0; i <= 14; i++) {
    const date = new Date(startDate.getTime() + i * 24 * 60 * 60 * 1000)

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    if (date.getDay() === 0) continue

    const dateStr = date.toLocaleDateString('ru-RU')
    const callbackData = `select_date_${date.toISOString().split('T')[0]}`

    console.log(`[GENERATE_BUTTONS] –°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞: ${dateStr} -> ${callbackData}`)

    currentRow.push({
      text: dateStr,
      callback_data: callbackData,
    })

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    if (currentRow.length === 3) {
      buttons.push([...currentRow])
      currentRow = []
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
  if (currentRow.length > 0) {
    buttons.push(currentRow)
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
  buttons.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_reschedule' }])

  return buttons
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã
async function handleDateSelection(bot, chatId, callbackQuery, selectedDate, userSessions) {
  try {
    console.log(
      `[DATE_SELECTION] –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: chatId=${chatId}, selectedDate=${selectedDate}`
    )
    console.log(`[DATE_SELECTION] Callback data: ${callbackQuery.data}`)

    const sessionData = userSessions[chatId]
    console.log(
      `[DATE_SELECTION] –ü–æ–ª–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è ${chatId}:`,
      JSON.stringify(sessionData, null, 2)
    )

    if (!sessionData?.awaitingDateSelection) {
      console.error(`[DATE_SELECTION] –ù–µ—Ç awaitingDateSelection –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è ${chatId}`)
      return
    }

    const { orderNumber } = sessionData.awaitingDateSelection
    console.log(`[DATE_SELECTION] –ò–∑–≤–ª–µ—á–µ–Ω orderNumber: ${orderNumber}`)
    console.log(`[DATE_SELECTION] –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ ${selectedDate} –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderNumber}`)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    sessionData.selectedNewDate = selectedDate
    sessionData.awaitingRescheduleReason = true

    console.log(`[DATE_SELECTION] –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:`, JSON.stringify(sessionData, null, 2))

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –ø–µ—Ä–µ–Ω–æ—Å–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
    const reasonRequestMessage = await bot.sendMessage(
      chatId,
      `üìù *–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞—Ç—ã –æ—Ç–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ${orderNumber}:*\n\n` +
        `üìÖ **–ù–æ–≤–∞—è –¥–∞—Ç–∞:** ${new Date(selectedDate).toLocaleDateString('ru-RU')}\n\n` +
        `üí¨ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç** —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã –ø–µ—Ä–µ–Ω–æ—Å–∞\n\n` +
        `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞!`,
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [[{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_reschedule' }]],
        },
      }
    )

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø—Ä–∏—á–∏–Ω—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    sessionData.reasonRequestMessageId = reasonRequestMessage.message_id

    await bot.answerCallbackQuery(callbackQuery.id)
  } catch (error) {
    console.error(`[DATE_SELECTION] –û—à–∏–±–∫–∞:`, error)
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã',
      show_alert: true,
    })
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –ø–µ—Ä–µ–Ω–æ—Å–∞
async function handleRescheduleReason(bot, chatId, text, userSessions) {
  try {
    const sessionData = userSessions[chatId]
    console.log(
      `[RESCHEDULE_REASON] –ü–æ–ª–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è ${chatId}:`,
      JSON.stringify(sessionData, null, 2)
    )

    if (!sessionData?.awaitingRescheduleReason) {
      console.error(`[RESCHEDULE_REASON] –ù–µ—Ç awaitingRescheduleReason –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è ${chatId}`)
      return
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º orderNumber –∏–∑ awaitingDateSelection, –∞ selectedNewDate –∏–∑ –∫–æ—Ä–Ω—è —Å–µ—Å—Å–∏–∏
    const orderNumber = sessionData.awaitingDateSelection?.orderNumber
    const selectedNewDate = sessionData.selectedNewDate

    console.log(
      `[RESCHEDULE_REASON] –ò–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: orderNumber=${orderNumber}, selectedNewDate=${selectedNewDate}`
    )

    if (!orderNumber || !selectedNewDate) {
      console.error(
        `[RESCHEDULE_REASON] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ: orderNumber=${orderNumber}, selectedNewDate=${selectedNewDate}`
      )
      console.error(`[RESCHEDULE_REASON] awaitingDateSelection:`, sessionData.awaitingDateSelection)
      await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞—Ç—ã')
      return
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏
    const companyResult = await dbPool.query(
      `SELECT c.*, uctb.chat_id 
       FROM companies c 
       JOIN user_company_tg_bot uctb ON c.id = uctb.company_id 
       WHERE uctb.chat_id = $1`,
      [chatId]
    )

    if (companyResult.rows.length === 0) {
      await bot.sendMessage(chatId, '–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      return
    }

    const company = companyResult.rows[0]

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
    await dbPool.query(
      `UPDATE orders_1c 
       SET dealer_response_received = TRUE, 
           dealer_response_at = NOW(),
           dealer_response_type = 'reschedule',
           new_shipping_date = $1,
           reschedule_reason = $2
       WHERE order_number = $3`,
      [selectedNewDate, text, orderNumber]
    )

    // –ü–æ–ª—É—á–∞–µ–º userId –¥–ª—è –ú–ü–ü
    let userId
    try {
      userId = await getMppByCompany(company.id)
    } catch (error) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å userId –¥–ª—è –ú–ü–ü:', error.message)
      await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ú–ü–ü')
      return
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ú–ü–ü
    await createReminder({
      newRecordId: -1,
      userId: userId,
      textCalc: `–î–∏–ª–µ—Ä –∑–∞–ø—Ä–æ—Å–∏–ª –ø–µ—Ä–µ–Ω–æ—Å –¥–∞—Ç—ã –æ—Ç–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ${orderNumber} –Ω–∞ ${new Date(
        selectedNewDate
      ).toLocaleDateString('ru-RU')}. –ü—Ä–∏—á–∏–Ω–∞: ${text}`,
      typeReminders: 'orders_1c',
      priority: '–≤—ã—Å–æ–∫–∏–π',
      title: `–ü–µ—Ä–µ–Ω–æ—Å –¥–∞—Ç—ã –∑–∞–∫–∞–∑–∞ *${company.name_companies}*. –ó–∞–∫–∞–∑ ‚Ññ${orderNumber}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å tg: (id:${chatId})`,
      tags: [
        { title: 'üìÖ –ü–µ—Ä–µ–Ω–æ—Å', color: '#ffc107' },
        { title: 'Telegram', color: '#007bff' },
      ],
      links: [],
    })

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    delete sessionData.awaitingDateSelection
    delete sessionData.selectedNewDate
    delete sessionData.awaitingRescheduleReason

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å messageId –≤ —Å–µ—Å—Å–∏–∏)
    if (sessionData.dateSelectionMessageId) {
      try {
        await bot.deleteMessage(chatId, sessionData.dateSelectionMessageId)
        console.log(
          `[RESCHEDULE_REASON] –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã: ${sessionData.dateSelectionMessageId}`
        )
      } catch (error) {
        console.log(
          `[RESCHEDULE_REASON] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã: ${error.message}`
        )
      }
      delete sessionData.dateSelectionMessageId
    }

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø—Ä–∏—á–∏–Ω—ã (–µ—Å–ª–∏ –µ—Å—Ç—å messageId –≤ —Å–µ—Å—Å–∏–∏)
    if (sessionData.reasonRequestMessageId) {
      try {
        await bot.deleteMessage(chatId, sessionData.reasonRequestMessageId)
        console.log(
          `[RESCHEDULE_REASON] –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø—Ä–∏—á–∏–Ω—ã: ${sessionData.reasonRequestMessageId}`
        )
      } catch (error) {
        console.log(
          `[RESCHEDULE_REASON] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø—Ä–∏—á–∏–Ω—ã: ${error.message}`
        )
      }
      delete sessionData.reasonRequestMessageId
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await bot.sendMessage(
      chatId,
      `‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n` +
        `üì¶ –ó–∞–∫–∞–∑ ‚Ññ${orderNumber}\n` +
        `üìÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞: ${new Date(selectedNewDate).toLocaleDateString('ru-RU')}\n` +
        `üìù –ü—Ä–∏—á–∏–Ω–∞: ${text}\n\n` +
        `–ú–ü–ü —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –∑–∞–ø—Ä–æ—Å–µ –ø–µ—Ä–µ–Ω–æ—Å–∞.`
    )
  } catch (error) {
    console.error(`[RESCHEDULE_REASON] –û—à–∏–±–∫–∞:`, error)
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞')
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ–Ω–æ—Å–∞
async function handleCancelReschedule(bot, chatId, callbackQuery, userSessions) {
  try {
    const sessionData = userSessions[chatId]
    if (sessionData) {
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
      if (sessionData.dateSelectionMessageId) {
        try {
          await bot.deleteMessage(chatId, sessionData.dateSelectionMessageId)
          console.log(
            `[CANCEL_RESCHEDULE] –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã: ${sessionData.dateSelectionMessageId}`
          )
        } catch (error) {
          console.log(
            `[CANCEL_RESCHEDULE] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã: ${error.message}`
          )
        }
        delete sessionData.dateSelectionMessageId
      }

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø—Ä–∏—á–∏–Ω—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
      if (sessionData.reasonRequestMessageId) {
        try {
          await bot.deleteMessage(chatId, sessionData.reasonRequestMessageId)
          console.log(
            `[CANCEL_RESCHEDULE] –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø—Ä–∏—á–∏–Ω—ã: ${sessionData.reasonRequestMessageId}`
          )
        } catch (error) {
          console.log(
            `[CANCEL_RESCHEDULE] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø—Ä–∏—á–∏–Ω—ã: ${error.message}`
          )
        }
        delete sessionData.reasonRequestMessageId
      }

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      delete sessionData.awaitingDateSelection
      delete sessionData.selectedNewDate
      delete sessionData.awaitingRescheduleReason
    }

    await bot.editMessageText('‚ùå –ü–µ—Ä–µ–Ω–æ—Å –¥–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω', {
      chat_id: chatId,
      message_id: callbackQuery.message.message_id,
    })

    await bot.answerCallbackQuery(callbackQuery.id)
  } catch (error) {
    console.error(`[CANCEL_RESCHEDULE] –û—à–∏–±–∫–∞:`, error)
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ 12:00)
function isResponseTimeValid() {
  const now = new Date()
  const currentHour = now.getHours()
  return currentHour < 12
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ—Å–ª–µ 12:00
async function checkAndBlockLateResponses(bot) {
  try {
    if (isResponseTimeValid()) return // –ï—â–µ –Ω–µ 12:00

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç
    const { rows } = await dbPool.query(
      `SELECT o.*, c.name_companies, c.id as company_id, uctb.chat_id
       FROM orders_1c o
       JOIN companies c ON o.inn = c.inn
       JOIN user_company_tg_bot uctb ON c.id = uctb.company_id
       WHERE o.notification_sent = TRUE 
         AND o.dealer_response_received = FALSE
         AND o.mpp_notified = FALSE
         AND DATE(o.notification_sent_at) = CURRENT_DATE`
    )

    for (const order of rows) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º userId –¥–ª—è –ú–ü–ü
        let userId
        try {
          userId = await getMppByCompany(order.company_id)
        } catch (error) {
          console.error(
            `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å userId –¥–ª—è –ú–ü–ü –∫–æ–º–ø–∞–Ω–∏–∏ ${order.name_companies}:`,
            error.message
          )
          continue
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ú–ü–ü
        await createReminder({
          newRecordId: -1,
          userId: userId,
          textCalc: `–î–∏–ª–µ—Ä –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Ç–æ—á–Ω–∏—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ! –ó–∞–∫–∞–∑ ‚Ññ${order.order_number}`,
          typeReminders: 'orders_1c',
          priority: '–≤—ã—Å–æ–∫–∏–π',
          title: `–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –¥–∏–ª–µ—Ä–∞ *${order.name_companies}*. –ó–∞–∫–∞–∑ ‚Ññ${
            order.order_number
          }. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å tg: (id:${order.chat_id || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'})`,
          tags: [
            { title: '‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ', color: '#dc3545' },
            { title: 'Telegram', color: '#007bff' },
          ],
          links: [],
        })

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        await dbPool.query(
          `UPDATE orders_1c 
           SET mpp_notified = TRUE, mpp_notified_at = NOW()
           WHERE order_number = $1`,
          [order.order_number]
        )

        console.log(`[LATE_RESPONSE] –ú–ü–ü —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –∑–∞–∫–∞–∑–µ ${order.order_number}`)
      } catch (error) {
        console.error(
          `[LATE_RESPONSE] –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ú–ü–ü –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order.order_number}:`,
          error
        )
      }
    }
  } catch (error) {
    console.error('[LATE_RESPONSE] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–¥–Ω–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤:', error)
  }
}

module.exports = {
  handleOrderConfirm,
  handleOrderReschedule,
  handleDateSelection,
  handleRescheduleReason,
  handleCancelReschedule,
  checkAndBlockLateResponses,
  isResponseTimeValid,
  generateDateButtons,
}
