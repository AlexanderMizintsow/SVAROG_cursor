const xlsx = require('xlsx') // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É xlsx
const fs = require('fs') // –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å fs, –µ—Å–ª–∏ –≤—ã –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ
const { getMppByCompany, createReminder } = require('../../helpers/api')
const { displayHelpMenu } = require('../../helpers/helpMenu')
const { sendRequest1C } = require('../../helpers/api')
const { getRandomColors } = require('../../helpers/getRandomColors')
const { deleteLastMessage, splitMessage } = require('../../helpers/utils.js')
const { handleCancel } = require('../../helpers/buttonCancel')
const { sanitizeFilename } = require('../../helpers/fileUtils') // –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏

async function handleVerification(bot, chatId, userSessions, companyInn) {
  userSessions[chatId] = userSessions[chatId] || {}
  // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞—Å—á–µ—Ç–∞
  await deleteLastMessage(bot, chatId, userSessions)

  const inlineKeyboard = [
    [
      {
        text: 'üí∞ –°–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è',
        callback_data: '/verification_financial',
      },
    ],
  ]

  // –ï—Å–ª–∏ companyInn –Ω–µ –ø—É—Å—Ç–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤ —Ä–∞–±–æ—Ç—É"
  if (companyInn) {
    inlineKeyboard.splice(2, 0, [
      {
        text: 'üìÖ –°–≤–µ—Ä–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º',
        callback_data: '/verification_orders',
      },
      {
        text: 'üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞',
        callback_data: '/verification_status',
      },
    ])
  }
  inlineKeyboard.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: '/cancel' }])
  const message = await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
    reply_markup: {
      inline_keyboard: inlineKeyboard,
    },
  })

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∞—Å—á–µ—Ç–∞—Ö
  userSessions[chatId].lastMessageId = message.message_id

  return message
}

// **********************************************
// **********************************************
// **********************************************
// ********************************************** –°–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è ************************************************************************
async function handleVerificationFinancial(bot, chatId, userSessions) {
  const sessionData = userSessions[chatId]
  // –ü–æ–ª—É—á–∞–µ–º userId, –∏—Å–ø–æ–ª—å–∑—É—è –≤—ã–Ω–µ—Å–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –ú–ü–ü
  const userId = await getMppByCompany(sessionData.companyId)
  console.error(`–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞: ${userId}`)
  try {
    //  –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    await createReminder({
      newRecordId: -1,
      userId,
      textCalc: '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–µ—Ä–∫–∞!',
      typeReminders: 'verificationFinancial',
      priority: '—Å—Ä–µ–¥–Ω–∏–π',
      title: `–°–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è *${
        userSessions[chatId].companyName
      }*. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å tg: (id:${chatId}) ${sessionData.userName ? sessionData.userName : ''}`,
      tags: [{ title: 'Telegram', ...getRandomColors() }],
      links: [],
    })

    await bot.sendMessage(chatId, '‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ!')
    displayHelpMenu(bot, chatId, userSessions)
  } catch (error) {
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ —Å–Ω–æ–≤–∞!')
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: ${error.message}`)
    if (error.response) {
      console.error(`–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞: ${JSON.stringify(error.response.data)}`)
    }
    await bot.sendMessage(
      chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
    )
  }
}
// ********************************************** ||| ************************************************************************
// **********************************************
// **********************************************
// **********************************************
// ********************************************** –°–≤–µ—Ä–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º  handleVerificationOrders ************************************************************************
async function handleVerificationOrders(bot, chatId, userSessions, companyInn) {
  const verification = `INN${companyInn}`
  const response = await sendRequest1C(verification)

  // –†–∞–∑–±–∏–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
  const maxLength = 4096
  const messages = splitMessage(response, maxLength)

  // –°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
  const workbook = xlsx.utils.book_new()
  const worksheetData = []

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  worksheetData.push(['–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–°—É–º–º–∞', '–ê–¥—Ä–µ—Å', '–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'])

  // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ response –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ worksheetData
  const results = response.split('\n').filter((line) => line.trim() !== '')
  results.forEach((line) => {
    // –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∑–∞–ø—è—Ç—ã–º
    const parts = line.split(',').map((part) => part.trim())
    if (parts.length >= 5) {
      // –£–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ –Ω–∞—á–∞–ª–∞ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
      const orderNumber = parts[0].replace(/^–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:\s*/, '')
      const orderName = parts[1].replace(/^–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:\s*/, '')
      const sumStr = parts[2].replace(/^–°—É–º–º–∞:\s*/, '').toString() // –°—É–º–º–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–ø—è—Ç—ã–µ
      const address = parts
        .slice(3, parts.length - 1)
        .join(', ')
        .replace(/^–ê–¥—Ä–µ—Å:\s*/, '')
        .trim()

      const date = parts[parts.length - 1].replace(/^–î–∞—Ç–∞:\s*/, '').trim()

      worksheetData.push([orderNumber, orderName, sumStr, address, date])
    }
  })

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ª–∏—Å—Ç–∞
  const worksheet = xlsx.utils.aoa_to_sheet(worksheetData)
  xlsx.utils.book_append_sheet(workbook, worksheet, '–ó–∞–∫–∞–∑—ã')

  // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
  const safeFilename = sanitizeFilename(`orders_${companyInn}.xlsx`)
  const filePath = safeFilename
  xlsx.writeFile(workbook, filePath)

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ —á–∞—Ç
  await bot.sendDocument(chatId, fs.createReadStream(filePath))

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
  fs.unlinkSync(filePath)

  await handleCancel(bot, chatId, userSessions)
}
// –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è, –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –≤ —á–∞—Ç–µ
/*async function handleVerificationOrders(bot, chatId, userSessions, companyInn) {
  const verification = `INN${companyInn}`
  const response = await sendRequest1C(verification)

  // –†–∞–∑–±–∏–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
  const maxLength = 4096
  const messages = splitMessage(response, maxLength)

  for (const message of messages) {
    await bot.sendMessage(chatId, message)
  }
  await handleCancel(bot, chatId, userSessions)
}*/

// ********************************************** ||| ************************************************************************

// **********************************************
// **********************************************
// **********************************************
// ********************************************** –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ handleVerificationOrdersStatus ************************************************************************
async function handleVerificationOrdersStatus(bot, chatId, userSessions, msg, companyInn) {
  if (!userSessions[chatId].awaitingVerificationOrdersStatus) {
    await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ 1–°...')
    userSessions[chatId].awaitingVerificationOrdersStatus = true
    return
  }

  if (userSessions[chatId].awaitingVerificationOrdersStatus) {
    const sScan = `V2R${msg.text}INN${companyInn}`

    const response = await sendRequest1C(sScan)

    if (!response) {
      await bot.sendMessage(chatId, `–ó–∞–∫–∞–∑ ${msg.text} –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω`)
      userSessions[chatId].awaitingVerificationOrdersStatus = false
      await handleCancel(bot, chatId, userSessions)
      return
    }

    await bot.sendMessage(chatId, response)

    userSessions[chatId].awaitingVerificationOrdersStatus = false
    await handleCancel(bot, chatId, userSessions)
    return
  }
}
// ********************************************** ||| ************************************************************************

module.exports = {
  handleVerification,
  handleVerificationFinancial,
  handleVerificationOrders,
  handleVerificationOrdersStatus,
}

/*
const ole = require('node-ole');

async function getDataFrom1C() {
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç OLE –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ 1–°
    const oleApp = ole('V83.Application');

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const –ø–∞—Ä–∞–º–µ—Ç—Ä—ã = 'Srvr="serv5";Ref="2025";Usr="tgBot";Pwd="@#$951";';

    try {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω—É–∂–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö 1–°
        oleApp.Connect(–ø–∞—Ä–∞–º–µ—Ç—Ä—ã);

        // –ó–∞–ø—Ä–æ—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        const query = `
            –í–´–ë–†–ê–¢–¨ 
                —Ä–µ–≥.—Å–¥–µ–ª–∫–∞.–Ω–æ–º–µ—Ä, 
                —Ä–µ–≥.—Å–¥–µ–ª–∫–∞.–Ω–æ–º–µ—Ä–°—á–µ—Ç–∞–í–°—É–ø–µ—Ä–æ–∫–Ω–∞—Ö,
                —Ä–µ–≥.—Å—É–º–º–∞–í–∑–∞–∏–º–æ—Ä–∞—Å—á–µ—Ç–æ–≤–û—Å—Ç–∞—Ç–æ–∫,
                —Ä–µ–≥.—Å–¥–µ–ª–∫–∞.—Ç–æ—á–∫–∞–î–æ—Å—Ç–∞–≤–∫–∏ 
            –ò–ó 
                —Ä–µ–≥–∏—Å—Ç—Ä–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è.—Ä–∞—Å—á–µ—Ç—ã–°–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º–∏.–æ—Å—Ç–∞—Ç–∫–∏ –ö–ê–ö —Ä–µ–≥
            –ì–î–ï 
                —Ä–µ–≥.–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç.–∏–Ω–Ω = "361703385105"
        `;

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        const result = oleApp.NewQuery(query);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const data = [];
        for (let i = 0; i < result.Count; i++) {
            const item = result.Item(i);
            data.push({
                –Ω–æ–º–µ—Ä: item.Get('–Ω–æ–º–µ—Ä'),
                –Ω–æ–º–µ—Ä–°—á–µ—Ç–∞: item.Get('–Ω–æ–º–µ—Ä–°—á–µ—Ç–∞–í–°—É–ø–µ—Ä–æ–∫–Ω–∞—Ö'),
                —Å—É–º–º–∞–í–∑–∞–∏–º–æ—Ä–∞—Å—á–µ—Ç–æ–≤–û—Å—Ç–∞—Ç–æ–∫: item.Get('—Å—É–º–º–∞–í–∑–∞–∏–º–æ—Ä–∞—Å—á–µ—Ç–æ–≤–û—Å—Ç–∞—Ç–æ–∫'),
                —Ç–æ—á–∫–∞–î–æ—Å—Ç–∞–≤–∫–∏: item.Get('—Ç–æ—á–∫–∞–î–æ—Å—Ç–∞–≤–∫–∏')
            });
        }

        // –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —ç–∫—Ä–∞–Ω
        console.log(data);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ 1–°:', error);
    } finally {
        try {
            oleApp.Disconnect(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏:', error);
        }
    }
}

// –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
getDataFrom1C();

*/
