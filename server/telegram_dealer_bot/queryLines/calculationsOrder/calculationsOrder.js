//calculationsOrder.js
const dbPool = require('../../database/db')
const { displayHelpMenu } = require('../../helpers/helpMenu')
const { getRandomColors } = require('../../helpers/getRandomColors')
const {
  getMppByCompany,
  getMprByCompany,
  createReminder,
} = require('../../helpers/api')
const { keyboardCancel, deleteLastMessage } = require('../../helpers/utils.js')

async function handleCalculations(bot, chatId, userSessions, companyInn) {
  userSessions[chatId] = userSessions[chatId] || {}

  // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞—Å—á–µ—Ç–∞
  await deleteLastMessage(bot, chatId, userSessions)

  const inlineKeyboard = [
    [
      { text: '‚ûï –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç', callback_data: '/new_calculation' },
      {
        text: '‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å—á–µ—Ç–µ',
        callback_data: '/editing_calculation',
      },
    ],
  ]

  // –ï—Å–ª–∏ companyInn –Ω–µ –ø—É—Å—Ç–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤ —Ä–∞–±–æ—Ç—É"
  if (companyInn) {
    inlineKeyboard.splice(2, 0, [
      {
        text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤ —Ä–∞–±–æ—Ç—É',
        callback_data: '/editing_calculation_done_order',
      },
    ])
  }

  inlineKeyboard.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: '/cancel' }])

  const message = await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
    reply_markup: {
      inline_keyboard: inlineKeyboard,
    },
  })

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∞—Å—á–µ—Ç–∞—Ö

  userSessions[chatId].lastMessageId = message.message_id

  return message
}

// **********************************************
// **********************************************
// **********************************************
//**************************************************************** –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç *************************************************************************/
async function handleNewCalculation(bot, chatId, userSessions) {
  userSessions[chatId] = userSessions[chatId] || {}
  userSessions[chatId].awaitingCalculation = true
  await deleteLastMessage(bot, chatId, userSessions)

  const message = await bot.sendMessage(
    chatId,
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç (üìÅ) / —Ñ–æ—Ç–æ (üì∏).',
    keyboardCancel
  )

  userSessions[chatId].lastMessageId = message.message_id
}

// **********************************************
// **********************************************
// **********************************************
// ********************************************** –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ **************************************************************************
async function handleEditingCalculation(bot, chatId, userSessions) {
  userSessions[chatId] = userSessions[chatId] || {}
  userSessions[chatId].awaitingCalculationEdite = true
  await deleteLastMessage(bot, chatId, userSessions)
  await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–∞—Å—Å—á–µ—Ç–∞.', keyboardCancel)
}

async function handleAwaitingCalculation(bot, chatId, msg, userSessions) {
  userSessions[chatId] = userSessions[chatId] || {}

  if (!userSessions[chatId].associatedTexts) {
    userSessions[chatId].associatedTexts = []
  }
  if (!userSessions[chatId].fileIds) {
    userSessions[chatId].fileIds = []
  }
  if (!userSessions[chatId].photoIds) {
    userSessions[chatId].photoIds = []
  }

  if (userSessions[chatId].awaitingCalculationEdite) {
    if (msg.text) {
      userSessions[chatId].calculationNumber = msg.text // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞
      userSessions[chatId].importance = 'hight'
      userSessions[chatId].awaitingCalculationEdite = false // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      await bot.sendMessage(
        chatId,
        `–ù–æ–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ "${msg.text}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ñ–æ—Ç–æ.`,
        keyboardCancel
      )
      userSessions[chatId].awaitingCalculation = true // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–≤–æ–¥–∞
      return
    }
  }

  if (msg.text) {
    if (msg.text.toLowerCase() === '–≥–æ—Ç–æ–≤–æ') {
      await deleteLastMessage(bot, chatId, userSessions)
      await finalizeCalculation(chatId, userSessions, bot)
      return
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if (userSessions[chatId].lastTextMessageId) {
      try {
        await bot.deleteMessage(chatId, userSessions[chatId].lastTextMessageId)
      } catch (error) {
        console.error(
          `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—Å—Ç–µ: ${error.message}`
        )
      }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    userSessions[chatId].associatedTexts.push(msg.text)
    const message = await bot.sendMessage(
      chatId,
      '–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–π —Å–µ—Å—Å–∏–∏, –ª–∏–±–æ –∑–∞–∫–æ–Ω—á–∏—Ç–µ —Å–µ—Å—Å–∏—é, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É - "–ì–û–¢–û–í–û".',
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '–ì–û–¢–û–í–û', callback_data: 'finish_calc' }, // –ö–Ω–æ–ø–∫–∞ "–ì–û–¢–û–í–û"
            ],
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: '/cancel' }],
          ],
        },
      }
    )

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
    userSessions[chatId].lastMessageId = message.message_id
    return
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  if (msg.document) {
    if (msg.caption) {
      const captionText = `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É: [${msg.caption}]`
      userSessions[chatId].associatedTexts.push(captionText)
    }
    userSessions[chatId].fileIds.push(msg.document.file_id)
    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if (userSessions[chatId].lastDocumentMessageId) {
      try {
        await bot.deleteMessage(
          chatId,
          userSessions[chatId].lastDocumentMessageId
        )
      } catch (error) {
        console.error(
          `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ: ${error.message}`
        )
      }
    }

    await bot.deleteMessage(chatId, userSessions[chatId].lastMessageId)

    const message = await bot.sendMessage(
      chatId,
      '–î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω! –ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–π —Å–µ—Å—Å–∏–∏, –ª–∏–±–æ –∑–∞–∫–æ–Ω—á–∏—Ç–µ —Å–µ—Å—Å–∏—é, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É - "–ì–û–¢–û–í–û".',
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '–ì–û–¢–û–í–û', callback_data: 'finish_calc' }, // –ö–Ω–æ–ø–∫–∞ "–ì–û–¢–û–í–û"
            ],
          ],
        },
      }
    )

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ
    userSessions[chatId].lastDocumentMessageId = message.message_id
    return
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
  if (msg.photo) {
    if (msg.caption) {
      const captionText = `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: [${msg.caption}]`
      userSessions[chatId].associatedTexts.push(captionText)
    }
    //  console.log(msg.caption)

    let maxPhoto = msg.photo.reduce((prev, current) =>
      prev.height > current.height ? prev : current
    )
    userSessions[chatId].photoIds.push(maxPhoto.file_id)
    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if (userSessions[chatId].lastPhotoMessageId) {
      try {
        await bot.deleteMessage(chatId, userSessions[chatId].lastPhotoMessageId)
      } catch (error) {
        console.error(
          `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ñ–æ—Ç–æ: ${error.message}`
        )
      }
    }

    const message = await bot.sendMessage(
      chatId,
      '–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–π —Å–µ—Å—Å–∏–∏, –ª–∏–±–æ –∑–∞–∫–æ–Ω—á–∏—Ç–µ —Å–µ—Å—Å–∏—é, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É - "–ì–û–¢–û–í–û".',
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '–ì–û–¢–û–í–û', callback_data: 'finish_calc' }, // –ö–Ω–æ–ø–∫–∞ "–ì–û–¢–û–í–û"
            ],
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: '/cancel' }],
          ],
        },
      }
    )

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º —Ñ–æ—Ç–æ
    userSessions[chatId].lastPhotoMessageId = message.message_id
    return
  }

  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
  await bot.sendMessage(
    chatId,
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ñ–æ—Ç–æ.'
  )
}

async function finalizeCalculation(chatId, userSessions, bot) {
  const sessionData = userSessions[chatId]
  console.log(sessionData)
  if (('sessionData', sessionData)) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º userId, –∏—Å–ø–æ–ª—å–∑—É—è –≤—ã–Ω–µ—Å–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
      const userId = await getMprByCompany(sessionData.companyId)

      // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
      const {
        id: newRecordId,
        fileLinks,
        photoLinks,
      } = await insertCalculationData(
        chatId,
        sessionData.companyId,
        sessionData,
        bot
      )

      const textCalc = sessionData.associatedTexts.join('\n') // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—á–µ—Ç–∞
      const allLinks = [...fileLinks, ...photoLinks]
      calcNumber = ''
      priority = '—Å—Ä–µ–¥–Ω–∏–π'
      tags = [{ title: 'Telegram', ...getRandomColors() }]

      if (userSessions[chatId].calculationNumber) {
        calcNumber = `–ø–æ –∑–∞–∫–∞–∑—É ${userSessions[chatId].calculationNumber}`
        priority = '–≤—ã—Å–æ–∫–∏–π'
        tags = [
          { title: 'üî¥–°–†–û–ß–ù–û', ...getRandomColors() },
          { title: 'Telegram', ...getRandomColors() },
        ]
      }
      const typeReminders = 'calculation'

      //  –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
      await createReminder({
        newRecordId,
        userId,
        textCalc,
        typeReminders,
        priority,
        title: `–†–∞—Å—á–µ—Ç –∑–∞–∫–∞–∑–∞ *${
          userSessions[chatId].companyName
        }* ${calcNumber}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å tg: (id:${chatId}) ${
          sessionData.userName ? sessionData.userName : ''
        }`,
        tags,
        links: allLinks,
      })

      // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
      console.log(chatId)
      console.log(userSessions[chatId].userName)
      //console.log(userSessions[chatId].userName1)

      userSessions[chatId].importance = 'normal'
      userSessions[chatId].associatedTexts = ''
      userSessions[chatId].fileIds = []
      userSessions[chatId].photoIds = []
      userSessions[chatId].awaitingCalculation = false
      delete userSessions[chatId].calculationNumber
      // delete userSessions[chatId]
      await bot.sendMessage(
        chatId,
        '‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–∞—à —Ä–∞—Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!'
      )
      displayHelpMenu(bot, chatId, userSessions)

      return true
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: ${error.message}`)
      await bot.sendMessage(
        chatId,
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
      )
    }
  }
  return false
}

//–ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã –†–∞—Å—á–µ—Ç–∞
async function insertCalculationData(chatId, companyId, sessionData, bot) {
  const query = `
    INSERT INTO calculations_bot_dealers (
      chat_id, 
      company_id, 
      calculation_number, 
      importance, 
      text_calc, 
      file_paths, 
      photo_paths, 
      file_links, 
      photo_links
    ) 
    VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING id;
  `

  const fileLinks = await Promise.all(
    sessionData.fileIds.map(async (fileId) => {
      const fileLink = await bot.getFile(fileId)
      return `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${fileLink.file_path}`
    })
  )

  const photoLinks = await Promise.all(
    sessionData.photoIds.map(async (photoId) => {
      const fileLink = await bot.getFile(photoId)
      return `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${fileLink.file_path}`
    })
  )
  //console.log(sessionData)
  const values = [
    chatId,
    companyId,
    sessionData.calculationNumber || null, // –ù–æ–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞
    sessionData.importance || 'normal', // –í–∞–∂–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    sessionData.associatedTexts.join('\n'), // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    null, // sessionData.fileIds.join(','), // –ü—É—Ç–∏ –∫–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º
    null, //sessionData.photoIds.join(','), // –ü—É—Ç–∏ –∫ —Ñ–æ—Ç–æ
    fileLinks.join(','), // –°—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    photoLinks.join(','), // –°—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
  ]

  const result = await dbPool.query(query, values)

  return { id: result.rows[0].id, fileLinks, photoLinks }
}

module.exports = {
  handleCalculations,
  handleNewCalculation,
  handleEditingCalculation,
  handleAwaitingCalculation,
  finalizeCalculation,
}
