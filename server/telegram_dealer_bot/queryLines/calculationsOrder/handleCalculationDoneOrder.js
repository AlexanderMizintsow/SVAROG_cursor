const dbPool = require('../../database/db')
const {
  createReminder,
  getMppByCompany,
  getTotalPriceOrderAW,
} = require('../../helpers/api')
const { getRandomColors } = require('../../helpers/getRandomColors')
const { handleCancel } = require('../../helpers/buttonCancel')
const { keyboardCancel, deleteLastMessage } = require('../../helpers/utils.js')
const { displayHelpMenu } = require('../../helpers/helpMenu.js')

// **********************************************
// **********************************************
// **********************************************
// ********************************************** –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤ —Ä–∞–±–æ—Ç—É **************************************************************************
async function handleCalculationDoneOrder(
  bot,
  chatId,
  userSessions,
  msg,
  companyInn
) {
  userSessions[chatId] = userSessions[chatId] || {}
  if (!userSessions[chatId].calculationDoneOrder) {
    userSessions[chatId].calculationDoneOrder = []
  }

  // –≠–¢–ê–ü 0 - –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –ê–í *********************************************************************************************
  if (!userSessions[chatId].awaitingCalculationDoneOrder) {
    await deleteLastMessage(bot, chatId, userSessions)
    userSessions[chatId].awaitingCalculationDoneOrder = 1
    await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ –∏–∑ –ê–ª—å—Ç–∞–≤–∏–Ω–∞')
    return
  }

  // –≠–¢–ê–ü 1 - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –∏ –≤—ã–≤–æ–¥ –∏–∑–¥–µ–ª–∏–π **************************************************************************
  if (userSessions[chatId].awaitingCalculationDoneOrder === 1) {
    response = ''
    const replyMarkup = {
      inline_keyboard: [
        [
          {
            text: '‚úÖ –î–∞',
            callback_data: `confirm_price_order_aw`, // –≠—Ç–∞–ø 3
          },
          {
            text: '‚ùå –ù–µ—Ç',
            callback_data: `cancel_price_order_aw`, // –≠—Ç–∞–ø 2
          },
        ],
        [
          {
            text: '‚õîÔ∏è –û—Ç–º–µ–Ω–∞', // –î–ª–∏–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
            callback_data: `cancel`,
          },
        ],
      ],
    }

    try {
      if (msg.text) {
        text = msg.text
        isButton = false
      } else {
        text = msg
        isButton = true
      }

      const response = await getTotalPriceOrderAW(
        text.replace(/^0+/, ''),
        companyInn,
        isButton
      )

      if (Array.isArray(response) && response.length > 1) {
        console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n', response) // –õ–æ–≥–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤

        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
        const orderButtons = response.map((order) => [
          {
            text: `–ó–∞–∫–∞–∑ –Ω–æ–º–µ—Ä: ${order.ORDERNO}, –¶–µ–Ω–∞: ${order.TOTALPRICE}—Ä.`,
            callback_data: order.ORDERNO, // –ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ callback_data
          },
        ])
        const orderButtonss = response.map((order) => {
          console.log(
            '–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ callback_data',
            order.ORDERNO
          )
        })

        const finalReplyMarkup = {
          inline_keyboard: [
            ...orderButtons, // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∑–∞–∫–∞–∑–∞–º–∏
            [
              {
                text: '‚õîÔ∏è –û—Ç–º–µ–Ω–∞', // –î–ª–∏–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
                callback_data: `cancel`,
              },
            ],
          ],
        }

        await bot.sendMessage(chatId, `–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤:`, {
          reply_markup: finalReplyMarkup,
        })
        return
      } else {
        if (msg.text) {
          userSessions[chatId].msgOrerNo = msg.text
        } else {
          userSessions[chatId].msgOrerNo = msg
        }

        userSessions[chatId].orerPrice = response.totalPrice
        const message = `–¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: ${response.totalPrice}—Ä. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å—É–º–º—É?`
        const messageMarkup = await bot.sendMessage(chatId, message, {
          reply_markup: replyMarkup,
        })
        userSessions[chatId].messageId = messageMarkup.message_id
        userSessions[chatId].awaitingCalculationDoneOrder = 0
      }
    } catch (error) {
      if (error.response && error.response.status === 404) {
        console.error('–û—à–∏–±–∫–∞: –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!')
        bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!')
        handleCancel(bot, chatId, userSessions)
      } else {
        console.error('–û—à–∏–±–∫–∞:', error)
        handleCancel(bot, chatId, userSessions)
      }
    }

    return
  }

  // –≠–¢–ê–ü 3 - –ö–Ω–æ–ø–∫–∞ - –î–ê –ß–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É **************************************************************************
  if (userSessions[chatId].awaitingCalculationDoneOrder === 3) {
    await bot.deleteMessage(chatId, userSessions[chatId].messageId)
    userSessions[chatId].awaitingCalculationDoneOrder = 4
    await bot.sendMessage(
      chatId,
      '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (–†–µ–≥–∏–æ–Ω, –ì–æ—Ä–æ–¥, –£–ª–∏—Ü–∞, –î–æ–º)',
      keyboardCancel
    )
    return
  }
  // –≠–¢–ê–ü 4 **************************************************************************
  if (userSessions[chatId].awaitingCalculationDoneOrder === 4) {
    userSessions[chatId].adress = msg.text
    userSessions[chatId].awaitingCalculationDoneOrder = 5
    await bot.sendMessage(
      chatId,
      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–ª—É–∂–±—ã –ª–æ–≥–∏—Å—Ç–∏–∫–∏ ',
      keyboardCancel
    )
    return
  }

  // –≠–¢–ê–ü 5 **************************************************************************
  if (userSessions[chatId].awaitingCalculationDoneOrder === 5) {
    const sessionData = userSessions[chatId]
    userSessions[chatId].telephone = msg.text

    userId = await getMppByCompany(sessionData.companyId)
    const textCalc = `–ü—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–∞ ${userSessions[chatId].msgOrerNo} –≤ –ê–ª—å—Ç–∞–≤–∏–Ω–µ –¥–∏–ª–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ ${userSessions[chatId].orerPrice} —Ä –∏ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
    –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏: ${userSessions[chatId].telephone}.
    –ê–¥—Ä–µ—Å: ${userSessions[chatId].adress}.
    –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≤—è–∑–∞—Ç—å—Å—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω–æ–π –¥–∞—Ç—ã!`
    tags = [
      { title: 'üî¥–°–†–û–ß–ù–û', ...getRandomColors() },
      { title: 'Telegram', ...getRandomColors() },
    ]

    try {
      //  –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ú–ü–ü
      await createReminder({
        newRecordId: -1,
        userId,
        textCalc: textCalc,
        typeReminders: 'calculation',
        priority: '–≤—ã—Å–æ–∫–∏–π',
        title: `–î–∏–ª–µ—Ä *${
          userSessions[chatId].companyName
        }* –ü–û–î–¢–í–ï–†–î–ò–õ –°–¢–û–ò–ú–û–°–¢–¨ –ó–ê–ö–ê–ó–ê. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å tg: (id:${chatId}) ${
          sessionData.userName ? sessionData.userName : ''
        }`,
        tags: tags,
        links: [],
      })

      await bot.sendMessage(
        chatId,
        '‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ!'
      )
      handleCancel(bot, chatId, userSessions)
      // displayHelpMenu(bot, chatId, userSessions)
    } catch (error) {
      await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ —Å–Ω–æ–≤–∞!')
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: ${error.message}`)
      if (error.response) {
        console.error(`–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞: ${JSON.stringify(error.response.data)}`)
      }
      await bot.sendMessage(
        chatId,
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
      )
    }
    return
  }

  // –≠–¢–ê–ü 2 - –ö–Ω–æ–ø–∫–∞ - –ù–ï–¢ –ß–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É **************************************************************************
  if (userSessions[chatId].awaitingCalculationDoneOrder === 2) {
    await bot.deleteMessage(chatId, userSessions[chatId].messageId)
    const sessionData = userSessions[chatId]
    userId = await getMppByCompany(sessionData.companyId)
    const textCalc = `–ü—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–∞ ${userSessions[chatId].msgOrerNo} –≤ –ê–ª—å—Ç–∞–≤–∏–Ω–µ –¥–∏–ª–µ—Ä –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ ${userSessions[chatId].orerPrice} —Ä.`
    tags = [
      { title: 'üî¥–°–†–û–ß–ù–û', ...getRandomColors() },
      { title: 'Telegram', ...getRandomColors() },
    ]

    try {
      //  –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ú–ü–ü
      await createReminder({
        newRecordId: -1,
        userId,
        textCalc: textCalc,
        typeReminders: 'calculation',
        priority: '–≤—ã—Å–æ–∫–∏–π',
        title: `–î–∏–ª–µ—Ä *${
          userSessions[chatId].companyName
        }* –ù–ï –ü–û–î–¢–í–ï–†–î–ò–õ –°–¢–û–ò–ú–û–°–¢–¨ –ó–ê–ö–ê–ó–ê. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å tg: (id:${chatId}) ${
          sessionData.userName ? sessionData.userName : ''
        }`,
        tags: tags,
        links: [],
      })

      await bot.sendMessage(
        chatId,
        '‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ!'
      )
      handleCancel(bot, chatId, userSessions)
    } catch (error) {
      await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ —Å–Ω–æ–≤–∞!')
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: ${error.message}`)
      if (error.response) {
        console.error(`–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞: ${JSON.stringify(error.response.data)}`)
      }
      await bot.sendMessage(
        chatId,
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
      )
    }
  }
}

module.exports = {
  handleCalculationDoneOrder,
}
