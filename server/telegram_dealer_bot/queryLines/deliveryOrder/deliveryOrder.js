const {
  getMppByCompany,
  createReminder,
  sendRequest1C,
} = require('../../helpers/api')
const { handleCancel } = require('../../helpers/buttonCancel')
const { displayHelpMenu } = require('../../helpers/helpMenu')
const { getRandomColors } = require('../../helpers/getRandomColors')
const { keyboardCancel, deleteLastMessage } = require('../../helpers/utils.js')

async function deliveryOrder(bot, chatId, userSessions, companyInn) {
  userSessions[chatId] = userSessions[chatId] || {}
  // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞—Å—á–µ—Ç–∞
  await deleteLastMessage(bot, chatId, userSessions)

  const inlineKeyboard = [
    [
      {
        text: 'üööüó∫Ô∏è –£—Ç–æ—á–Ω–∏—Ç—å –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è',
        callback_data: '/delivery_order_driver_location',
      },
    ],
    [
      {
        text: 'üööüì¨ –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –¥–æ—Å—Ç–∞–≤–∫–∞ –¥–æ....? ',
        callback_data: '/delivery_order_to_point',
      },
    ],
    /* [
      {
        text: 'üööüìÖ –ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ? (–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!) ',
        callback_data: 'disabled', //'/delivery_order_to_point_date',
      },
    ],*/
    [
      {
        text: 'üïíüö´ –°–æ–æ–±—â–∏—Ç—å –æ–± –æ–ø–æ–∑–¥–∞–Ω–∏–∏',
        callback_data: '/delivery_order_driver_delay',
      },
    ],
  ]
  // –ï—Å–ª–∏ companyInn –Ω–µ –ø—É—Å—Ç–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤ —Ä–∞–±–æ—Ç—É"
  if (companyInn) {
    inlineKeyboard.splice(0, 0, [
      {
        text: 'üïí‚úÖ –£—Ç–æ—á–Ω–∏—Ç—å –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏',
        callback_data: '/delivery_order_time',
      },

      {
        text: 'üööüìÖ –£—Ç–æ—á–Ω–∏—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏',
        callback_data: '/delivery_order_date',
      },
    ])
  }

  inlineKeyboard.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: '/cancel' }])
  const message = await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
    reply_markup: {
      inline_keyboard: inlineKeyboard,
    },
  })

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∞—Å—á–µ—Ç–∞—Ö
  userSessions[chatId].lastMessageId = message.message_id

  return message
}

// **********************************************
// **********************************************
// **********************************************
// ********************************************** –ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ?  ************************************************************************
async function deliveryOrderToPointDate(
  bot,
  chatId,
  msg,
  userSessions,
  companyInn
) {
  userSessions[chatId] = userSessions[chatId] || {}
  // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞—Å—á–µ—Ç–∞
  await deleteLastMessage(bot, chatId, userSessions)

  // –≠–¢–ê–ü 0 - –≤–≤–æ–¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è *********************************************************************************************
  if (!userSessions[chatId].awaitingOrderToPointDate) {
    userSessions[chatId].awaitingOrderToPointDate = 1

    const inlineKeyboardCity = [
      [
        {
          text: '–ë–∞–ª–∞–∫–æ–≤–æ',
          callback_data: '–ë–∞–ª–∞–∫–æ–≤–æ',
        },
        {
          text: '–ë–∞–ª–∞—à–æ–≤',
          callback_data: '–ë–∞–ª–∞—à–æ–≤,',
        },
        {
          text: '–ë–µ–ª–≥–æ—Ä–æ–¥',
          callback_data: '–ë–µ–ª–≥–æ—Ä–æ–¥',
        },
        {
          text: '–ë–æ—Ä–∏—Å–æ–≥–ª–µ–±—Å–∫',
          callback_data: '–ë–æ—Ä–∏—Å–æ–≥–ª–µ–±—Å–∫',
        },
      ],

      [
        {
          text: '–í–æ–ª–≥–æ–≥—Ä–∞–¥',
          callback_data: '–í–æ–ª–≥–æ–≥—Ä–∞–¥',
        },
        {
          text: '–í–æ–ª—å—Å–∫',
          callback_data: '–í–æ–ª—å—Å–∫',
        },
      ],
      [
        {
          text: '–ï–ª–∞–Ω—å',
          callback_data: '–ï–ª–∞–Ω—å',
        },
        {
          text: '–ï—Ä—à–æ–≤',
          callback_data: '–ï—Ä—à–æ–≤',
        },
      ],
      [
        {
          text: '–ñ–∏—Ä–Ω–æ–≤—Å–∫',
          callback_data: '–ñ–∏—Ä–Ω–æ–≤—Å–∫',
        },
      ],
      [
        {
          text: '–ö–∞–º–µ–Ω–∫–∞',
          callback_data: '–ö–∞–º–µ–Ω–∫–∞',
        },
        {
          text: '–ö–∞–º—ã—à–∏–Ω',
          callback_data: '–ö–∞–º—ã—à–∏–Ω',
        },
        {
          text: '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä',
          callback_data: '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä',
        },
        {
          text: '–ö—É–∑–Ω–µ—Ü–∫',
          callback_data: '–ö—É–∑–Ω–µ—Ü–∫',
        },
      ],
      [
        {
          text: '–ú–∞—Ä–∏—É–ø–æ–ª—å',
          callback_data: '–ú–∞—Ä–∏—É–ø–æ–ª—å',
        },
        {
          text: '–ú–∞—Ä–∫—Å',
          callback_data: '–ú–∞—Ä–∫—Å',
        },
        {
          text: '–ú–∏—Ö–∞–π–ª–æ–≤–∫–∞',
          callback_data: '–ú–∏—Ö–∞–π–ª–æ–≤–∫–∞',
        },
        {
          text: '–ú–æ—Å–∫–≤–∞',
          callback_data: '–ú–æ—Å–∫–≤–∞',
        },
      ],
      [
        {
          text: '–ù–∏–∫–æ–ª—å—Å–∫',
          callback_data: '–ù–∏–∫–æ–ª—å—Å–∫',
        },
        {
          text: '–ù–æ–≤–æ—É–∑–µ–Ω—Å–∫',
          callback_data: '–ù–æ–≤–æ—É–∑–µ–Ω—Å–∫',
        },
      ],
      [
        {
          text: '–ü–∞–≤–ª–æ–≤–∫–∞',
          callback_data: '–ü–∞–≤–ª–æ–≤–∫–∞',
        },
        {
          text: '–ü–∞–ª–ª–∞—Å–æ–≤–∫–∞',
          callback_data: '–ü–∞–ª–ª–∞—Å–æ–≤–∫–∞',
        },
        {
          text: '–ü–µ–Ω–∑–∞',
          callback_data: '–ü–µ–Ω–∑–∞',
        },
      ],
      [
        {
          text: '–ü–µ—Ç—Ä–æ–≤—Å–∫',
          callback_data: '–ü–µ—Ç—Ä–æ–≤—Å–∫',
        },
        {
          text: '–ü–æ–ª—Ç–∞–≤–∫–∞',
          callback_data: '–ü–æ–ª—Ç–∞–≤–∫–∞',
        },
        {
          text: '–ü—É–≥–∞—á–µ–≤',
          callback_data: '–ü—É–≥–∞—á–µ–≤',
        },
      ],
      [
        {
          text: '–°–∞–º–∞—Ä–∞',
          callback_data: '–°–∞–º–∞—Ä–∞',
        },
        {
          text: '–°–∞—Ä–∞–Ω—Å–∫',
          callback_data: '–°–∞—Ä–∞–Ω—Å–∫',
        },
        {
          text: '–°–∞—Ä–∞—Ç–æ–≤',
          callback_data: '–°–∞—Ä–∞—Ç–æ–≤',
        },
        {
          text: '–°–µ—Ä–¥–æ–±—Å–∫',
          callback_data: '–°–µ—Ä–¥–æ–±—Å–∫',
        },
        {
          text: '–°—ã–∑—Ä–∞–Ω—å',
          callback_data: '–°—ã–∑—Ä–∞–Ω—å',
        },
      ],
      [
        {
          text: '–¢–∞–º–±–æ–≤',
          callback_data: '–¢–∞–º–±–æ–≤',
        },
        {
          text: '–¢–æ–ª—å—è—Ç—Ç–∏',
          callback_data: '–¢–æ–ª—å—è—Ç—Ç–∏',
        },
      ],
      [
        {
          text: '–£–ª—å—è–Ω–æ–≤—Å–∫',
          callback_data: '–£–ª—å—è–Ω–æ–≤—Å–∫',
        },
        {
          text: '–£—Ä—é–ø–∏–Ω—Å–∫',
          callback_data: '–£—Ä—é–ø–∏–Ω—Å–∫',
        },
      ],
      [
        {
          text: '–û—Ç–¥–µ–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞',
          callback_data: '–û—Ç–¥–µ–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞',
        },
      ],
      [
        {
          text: '–°–∞–º–æ–≤—ã–≤–æ–∑',
          callback_data: '–°–∞–º–æ–≤—ã–≤–æ–∑',
        },
      ],
    ]

    inlineKeyboardCity.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: '/cancel' }])
    const message = await bot.sendMessage(chatId, '–£–∫–∞–∂–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', {
      reply_markup: {
        inline_keyboard: inlineKeyboardCity,
      },
    })
    userSessions[chatId].lastMessageId = message.message_id
    return
  }

  // –≠–¢–ê–ü 1 - –≤–≤–æ–¥ —Ç–∏–ø–∞ –∏–∑–¥–µ–ª–∏—è *********************************************************************************************
  if (userSessions[chatId].awaitingOrderToPointDate === 1) {
    userSessions[chatId].awaitingOrderToPointDate = 2
    userSessions[chatId].city = msg

    await deleteLastMessage(bot, chatId, userSessions)

    const inlineKeyboardType = [
      [
        {
          text: '–û–∫–Ω–æ/–±–∞–ª–∫–æ–Ω–Ω–∞—è –¥–≤–µ—Ä—å',
          callback_data: '–û–∫–Ω–æ/–±–∞–ª–∫–æ–Ω–Ω–∞—è –¥–≤–µ—Ä—å',
        },
      ],
      [
        {
          text: '–ê—Ä–∫–∞/—Ç—Ä–∞–ø–µ—Ü–∏—è/—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫',
          callback_data: '–ê—Ä–∫–∞/—Ç—Ä–∞–ø–µ—Ü–∏—è/—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫',
        },
      ],
      [
        {
          text: '–î–≤–µ—Ä—å/–º–µ–∂–∫–æ–º–Ω–∞—Ç–Ω–∞—è –¥–≤–µ—Ä—å',
          callback_data: '–î–≤–µ—Ä—å/–º–µ–∂–∫–æ–º–Ω–∞—Ç–Ω–∞—è –¥–≤–µ—Ä—å',
        },
      ],
      [
        {
          text: '–ò–∑–¥–µ–ª–∏–µ —Å –¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω–µ–π —Ä—É—á–∫–æ–π',
          callback_data: '–ò–∑–¥–µ–ª–∏–µ —Å –¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω–µ–π —Ä—É—á–∫–æ–π',
        },
      ],
      [
        {
          text: '–ú–æ—Å–∫–∏—Ç–Ω–∞—è —Å–µ—Ç–∫–∞',
          callback_data: '–ú–æ—Å–∫–∏—Ç–Ω–∞—è —Å–µ—Ç–∫–∞',
        },
      ],
    ]

    inlineKeyboardType.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: '/cancel' }])
    const message = await bot.sendMessage(chatId, '–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –∏–∑–¥–µ–ª–∏—è:', {
      reply_markup: {
        inline_keyboard: inlineKeyboardType,
      },
    })

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∞—Å—á–µ—Ç–∞—Ö
    userSessions[chatId].lastMessageId = message.message_id
    return
  }

  // –≠–¢–ê–ü 2 - –≤–≤–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ *********************************************************************************************
  if (userSessions[chatId].awaitingOrderToPointDate === 2) {
    userSessions[chatId].awaitingOrderToPointDate = 3
    userSessions[chatId].type = msg

    await deleteLastMessage(bot, chatId, userSessions)

    const inlineKeyboardType = [
      [
        {
          text: '–ü–í–•',
          callback_data: '–ü–í–•',
        },
        {
          text: '–ê–ª—é–º–∏–Ω–∏–π',
          callback_data: '–ê–ª—é–º–∏–Ω–∏–π',
        },
      ],
      [
        {
          text: '–õ–∞–º–∏–Ω–∞—Ü–∏—è –ü–í–•',
          callback_data: '–õ–∞–º–∏–Ω–∞—Ü–∏—è –ü–í–•',
        },
      ],
    ]

    inlineKeyboardType.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: '/cancel' }])
    const message = await bot.sendMessage(chatId, '–£–∫–∞–∂–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:', {
      reply_markup: {
        inline_keyboard: inlineKeyboardType,
      },
    })

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∞—Å—á–µ—Ç–∞—Ö
    userSessions[chatId].lastMessageId = message.message_id
    return
  }

  // –≠–¢–ê–ü 3 - –†–∞—Å—Å—á–µ—Ç –ø–æ —Ñ–æ—Ä–º—É–ª–µ *********************************************************************************************
  if (userSessions[chatId].awaitingOrderToPointDate === 3) {
    userSessions[chatId].material = msg
    await bot.sendMessage(chatId, '–í–µ—Ç–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!!!')
    return
  }
}

// **********************************************
// **********************************************
// **********************************************
// ********************************************** –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –¥–æ—Å—Ç–∞–≤–∫–∞ –¥–æ....?  ************************************************************************
async function deliveryOrderToPoint(bot, chatId, msg, userSessions) {
  // –≠–¢–ê–ü 0 - –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ *********************************************************************************************
  if (!userSessions[chatId].awaitingOrderToPoint) {
    userSessions[chatId].awaitingOrderToPoint = 1
    await bot.sendMessage(
      chatId,
      '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞. (–†–µ–≥–∏–æ–Ω!, –Ω.–ø.)',
      keyboardCancel
    )
    return
  }

  // –≠–¢–ê–ü 1 - –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ *********************************************************************************************
  if (userSessions[chatId].awaitingOrderToPoint === 1) {
    userSessions[chatId].adress = msg.text
    const deliveryMenu = [
      {
        text: '–ü–æ–ø—É—Ç–Ω–∞—è –º–∞—à–∏–Ω–∞',
        callback_data: 'passing_car',
      },
      {
        text: '–°–±–æ—Ä–Ω–∞—è –º–∞—à–∏–Ω–∞',
        callback_data: 'assembly_car',
      },
      {
        text: '–û—Ç–¥–µ–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞',
        callback_data: 'separate_car',
      },
      { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: '/cancel' },
    ]

    const keyboard = deliveryMenu.map((option) => [option])
    const options = {
      reply_markup: {
        inline_keyboard: keyboard,
      },
    }

    const message = await bot.sendMessage(
      chatId,
      '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏:',
      options
    )
    userSessions[chatId].messageId = message.message_id
  }

  // –≠–¢–ê–ü 2 - –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–∞—à–∏–Ω—ã *********************************************************************************************
  if (userSessions[chatId].awaitingOrderToPoint === 2) {
    await bot.deleteMessage(chatId, userSessions[chatId].messageId)
    const sessionData = userSessions[chatId]
    let carType = ''
    if (msg === 'passing_car') carType = '–ü–æ–ø—É—Ç–Ω–∞—è –º–∞—à–∏–Ω–∞'
    if (msg === 'assembly_car') carType = '–°–±–æ—Ä–Ω–∞—è –º–∞—à–∏–Ω–∞'
    if (msg === 'separate_car') carType = '–û—Ç–¥–µ–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞'

    userId = await getMppByCompany(sessionData.companyId)

    try {
      //  –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
      await createReminder({
        newRecordId: -2,
        userId,
        textCalc: `–£—Ç–æ—á–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ "${carType}", –ø–æ –∞–¥—Ä–µ—Å—É: ${userSessions[chatId].adress}`,
        typeReminders: 'delivery_order',
        priority: '–≤—ã—Å–æ–∫–∏–π',
        title: `–£—Ç–æ—á–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è *${
          userSessions[chatId].companyName
        }*. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å tg: (id:${chatId}) ${
          sessionData.userName ? sessionData.userName : ''
        }`,
        tags: [
          { title: 'üî¥–°–†–û–ß–ù–û', ...getRandomColors() },
          { title: 'Telegram', ...getRandomColors() },
        ],
        links: [],
      })

      await bot.sendMessage(
        chatId,
        '‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ!'
      )
      carType = ''
      handleCancel(bot, chatId, userSessions)
      // displayHelpMenu(bot, chatId, userSessions)
    } catch (error) {
      await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ —Å–Ω–æ–≤–∞!')
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: ${error.message}`)
      if (error.response) {
        console.error(`–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞: ${JSON.stringify(error.response.data)}`)
      }
      await bot.sendMessage(
        chatId,
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
      )
    }

    return
  }
}

// **********************************************
// **********************************************
// **********************************************
// ********************************************** –£—Ç–æ—á–Ω–∏—Ç—å –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ ************************************************************************
async function deliveryOrderTime(bot, chatId, msg, userSessions, companyInn) {
  if (!userSessions[chatId].awaitingDeliveryOrderTime) {
    userSessions[chatId].awaitingDeliveryOrderTime = 1
    await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ 1–°', keyboardCancel)
    return
  }
  if (userSessions[chatId].awaitingDeliveryOrderTime === 1) {
    const sScan = `V3R${msg.text}INN${companyInn}`

    const response = await sendRequest1C(sScan)

    if (!response) {
      await bot.sendMessage(chatId, `–ó–∞–∫–∞–∑ ${msg.text} –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω`)
      delete userSessions[chatId].awaitingDeliveryOrderTime
      handleCancel(bot, chatId, userSessions)
      return
    }

    const timeMatch = response.match(/\d{1,2}:\d{2}:\d{2}/)
    if (timeMatch) {
      const time = timeMatch[0] // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
      await bot.sendMessage(chatId, time)
    } else {
      await bot.sendMessage(
        chatId,
        `–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤—Ä–µ–º—è –∏–∑ –æ—Ç–≤–µ—Ç–∞: "${response}"`
      )
    }

    delete userSessions[chatId].awaitingDeliveryOrderTime
    handleCancel(bot, chatId, userSessions)
    return
  }
}

// **********************************************
// **********************************************
// **********************************************
// ********************************************** –£—Ç–æ—á–Ω–∏—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ ************************************************************************
async function deliveryOrderDate(bot, chatId, msg, userSessions, companyInn) {
  if (!userSessions[chatId].awaitingDeliveryOrderDate) {
    userSessions[chatId].awaitingDeliveryOrderDate = 1
    await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ 1–°', keyboardCancel)
    return
  }
  if (userSessions[chatId].awaitingDeliveryOrderDate === 1) {
    const sScan = `V4R${msg.text}INN${companyInn}` // –í–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –æ—Å—Ç–∞–≤–∏—Ç—å V3R, –¥–∞—Ç–∞ —Ç–∞ –∂–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ 4 —è –Ω–µ –¥–µ–ª–∞–ª
    const response = await sendRequest1C(sScan)

    if (!response) {
      await bot.sendMessage(chatId, `–ó–∞–∫–∞–∑ ${msg.text} –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω`)
      delete userSessions[chatId].awaitingDeliveryOrderDate
      handleCancel(bot, chatId, userSessions)
      return
    }

    const date = response.split(' ')[0] // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –¥–∞—Ç—É 27.01.2025 10:10:11
    await bot.sendMessage(chatId, date)

    delete userSessions[chatId].awaitingDeliveryOrderDate
    handleCancel(bot, chatId, userSessions)
  }
}

// **********************************************
// **********************************************
// **********************************************
// ********************************************** –£—Ç–æ—á–Ω–∏—Ç—å –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è ************************************************************************
async function deliveryOrderDriverLocation(bot, chatId, userSessions) {
  const sessionData = userSessions[chatId]

  // –ü–æ–ª—É—á–∞–µ–º userId, –∏—Å–ø–æ–ª—å–∑—É—è –≤—ã–Ω–µ—Å–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
  const userId = await getMppByCompany(sessionData.companyId)

  try {
    //  –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    await createReminder({
      newRecordId: -2,
      userId,
      textCalc: '–£—Ç–æ—á–Ω–∏—Ç—å –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è',
      typeReminders: 'delivery_order',
      priority: '–≤—ã—Å–æ–∫–∏–π',
      title: `–£—Ç–æ—á–Ω–∏—Ç—å –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è *${
        userSessions[chatId].companyName
      }*. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å tg: (id:${chatId}) ${
        sessionData.userName ? sessionData.userName : ''
      }`,
      tags: [
        { title: 'üî¥–°–†–û–ß–ù–û', ...getRandomColors() },
        { title: 'Telegram', ...getRandomColors() },
      ],
      links: [],
    })

    await bot.sendMessage(
      chatId,
      '‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ!'
    )
    displayHelpMenu(bot, chatId, userSessions)
  } catch (error) {
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ —Å–Ω–æ–≤–∞!')
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: ${error.message}`)
    if (error.response) {
      console.error(`–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞: ${JSON.stringify(error.response.data)}`)
    }
    await bot.sendMessage(
      chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
    )
  }
}

// **********************************************
// **********************************************
// **********************************************
// ********************************************** –°–æ–æ–±—â–∏—Ç—å –æ–± –æ–ø–æ–∑–¥–∞–Ω–∏–∏ ************************************************************************
async function deliveryOrderDriverDelay(bot, chatId, userSessions) {
  const sessionData = userSessions[chatId]

  // –ü–æ–ª—É—á–∞–µ–º userId, –∏—Å–ø–æ–ª—å–∑—É—è –≤—ã–Ω–µ—Å–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
  const userId = await getMppByCompany(sessionData.companyId)

  try {
    //  –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    await createReminder({
      newRecordId: -2,
      userId,
      textCalc: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–æ–∑–¥–∞–Ω–∏–∏!',
      typeReminders: 'delivery_order',
      priority: '–≤—ã—Å–æ–∫–∏–π',
      title: `–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç *${
        userSessions[chatId].companyName
      }*. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å tg: (id:${chatId}) ${
        sessionData.userName ? sessionData.userName : ''
      }`,
      tags: [
        { title: 'üî¥–°–†–û–ß–ù–û', ...getRandomColors() },
        { title: 'Telegram', ...getRandomColors() },
      ],
      links: [],
    })

    await bot.sendMessage(
      chatId,
      '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ!'
    )
    displayHelpMenu(bot, chatId, userSessions)
  } catch (error) {
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ —Å–Ω–æ–≤–∞!')
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: ${error.message}`)
    if (error.response) {
      console.error(`–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞: ${JSON.stringify(error.response.data)}`)
    }
    await bot.sendMessage(
      chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
    )
  }
}

module.exports = {
  deliveryOrder,
  deliveryOrderTime,
  deliveryOrderDriverDelay,
  deliveryOrderDriverLocation,
  deliveryOrderDate,
  deliveryOrderToPoint,
  deliveryOrderToPointDate,
}
