//—Ñ–∞–π–ª notificationSender.js
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
async function notifySupervisor(bot, dbPool, userId, reminder) {
  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –æ—Ç–¥–µ–ª–∞ (–∂–∞–ª—É–µ–º—Å—è –ø–æ –ø–æ–ª–Ω–æ–π)
  const supervisorResult = await dbPool.query(
    `SELECT d.head_user_id,
     CONCAT(current.first_name,' ', current.middle_name,' ', current.last_name) AS implementer 
     FROM users AS current
     JOIN departments AS d ON current.department_id = d.id
     WHERE current.id = $1`,
    [userId]
  )

  if (supervisorResult.rows.length > 0) {
    const headUserId = supervisorResult.rows[0].head_user_id
    const implementer = supervisorResult.rows[0].implementer

    const settingsHeadResult = await dbPool.query(
      'SELECT showOverdueImplementer FROM calls_settings_users WHERE user_id = $1',
      [headUserId]
    )
    const { showoverdueimplementer } = settingsHeadResult.rows[0]

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ chat_id –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è

    if (showoverdueimplementer) {
      const supervisorChatIdResult = await dbPool.query(
        'SELECT chat_id FROM telegramm_registrations_chat WHERE user_id = $1',
        [headUserId]
      )

      if (supervisorChatIdResult.rows.length > 0) {
        const supervisorChatId = supervisorChatIdResult.rows[0].chat_id

        let messageHeadUser = `‚ö†Ô∏èüîî *–í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–∏–ª–µ—Ä–∞!* –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ–ª–µ–µ 15 –º–∏–Ω—É—Ç! ‚è∞‚ùå
        
        üìã *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:* ${reminder.title}
        üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${reminder.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}
        üë§ *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* ${implementer}
        
        –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ ‚Äì —É –≤–∞—à–∏—Ö –ø–æ–¥—á–∏–Ω—ë–Ω–Ω—ã—Ö –µ—Å—Ç—å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–∏–ª–µ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ä—ã –¥–ª—è —Å–∫–æ—Ä–µ–π—à–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É.
        `

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é
        await bot.sendMessage(supervisorChatId, messageHeadUser)
      }
    }
  }
}

async function sendMissedCallNotifications(
  bot,
  dbPool,
  client,
  lastNotificationTime
) {
  try {
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º chatId –∏ userId –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const chatIdResult = await dbPool.query(
      'SELECT chat_id, user_id FROM telegramm_registrations_chat WHERE registered = $1',
      [true]
    )

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for (const row of chatIdResult.rows) {
      const { chat_id, user_id } = row

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const settingsResult = await dbPool.query(
        'SELECT showCallMissedTg, showMissedCallsEmployee FROM calls_settings_users WHERE user_id = $1',
        [user_id]
      )

      if (settingsResult.rows.length === 0) {
        continue // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      }

      const { showcallmissedtg, showmissedcallsemployee } =
        settingsResult.rows[0]

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ n –Ω–∞ –æ—Å–Ω–æ–≤–µ showMissedCallsEmployee
      const n = showmissedcallsemployee

      // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
      const totalCountQuery = n
        ? 'SELECT COUNT(*) FROM calls WHERE status = $1'
        : 'SELECT COUNT(*) FROM calls WHERE status = $1 AND LENGTH(caller_number) > 3'

      const totalCountParams = n ? ['missed'] : ['missed']
      const totalCountResult = await client.query(
        totalCountQuery,
        totalCountParams
      )
      const totalCount = totalCountResult.rows[0].count

      // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const resultQuery = n
        ? 'SELECT * FROM calls WHERE status = $1 AND accepted_at > $2'
        : 'SELECT * FROM calls WHERE status = $1 AND accepted_at > $2 AND LENGTH(caller_number) > 3'

      const resultParams = n
        ? ['missed', lastNotificationTime]
        : ['missed', lastNotificationTime]
      const result = await client.query(resultQuery, resultParams)

      let message = `üîî –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ üìû\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤: ${totalCount}\n`

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º validCalls –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ message
      const validCalls = result.rows.filter(
        (call) => call.caller_number !== null
      )

      if (validCalls.length > 0) {
        message += '–ù–æ–≤—ã–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏:\n'

        validCalls.forEach((call) => {
          message += `
            ID: ${call.id}
            –ù–æ–º–µ—Ä –∑–≤–æ–Ω—è—â–µ–≥–æ: ${call.caller_number}
            –ù–æ–º–µ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ${call.receiver_number || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
            –î–∞—Ç–∞ –∑–≤–æ–Ω–∫–∞: ${new Date(call.accepted_at).toLocaleString('ru-RU')}
          `
        })
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
      if (validCalls.length > 0 && showcallmissedtg) {
        await bot.sendMessage(chat_id, message)
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    return new Date()
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error)
  }
}

//*************************************************************************** */
async function sendReminderNotifications(bot, dbPool) {
  try {
    const now = new Date()
    const threeMinutesAgo = new Date(now.getTime() - 2 * 60 * 1000) // 2 –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥
    const excludedTypes = [
      'calculation',
      'delivery_order',
      'finances',
      'verificationFinancial',
    ]
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏ –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ–∑–¥–Ω–µ–µ 2 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ –æ—Ç –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    // –≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏
    // –¢–∞–∫ –∂–µ –∏—â–µ—Ç –ª—é–±—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É type_reminders –∑–∞ –ø–µ—Ä–∏–æ–¥ 2 –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥
    const remindersQuery = `
    SELECT * 
FROM reminders 
WHERE date_time <= $1 
AND date_time >= $2 
AND is_completed = FALSE  
AND (type_reminders = 'call' OR type_reminders = 'calculation' OR type_reminders = 'delivery_order' OR type_reminders = 'finances' OR type_reminders = 'verificationFinancial')
AND NOT (type_reminders IN ('calculation', 'delivery_order', 'finances', 'verificationFinancial') AND date_trunc('minute', created_at) = date_trunc('minute', date_time))
    `
    const remindersResult = await dbPool.query(remindersQuery, [
      now,
      threeMinutesAgo,
    ])

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ user_id
    const remindersByUser = {}
    remindersResult.rows.forEach((reminder) => {
      if (!remindersByUser[reminder.user_id]) {
        remindersByUser[reminder.user_id] = []
      }
      remindersByUser[reminder.user_id].push(reminder)
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∏–º–µ—é—â–µ–º—É –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è type_reminders = 'call'
    for (const userId in remindersByUser) {
      const userReminders = remindersByUser[userId]

      const settingsResult = await dbPool.query(
        'SELECT showRemindersCalls, showOverdueNotification  FROM calls_settings_users WHERE user_id = $1',
        [userId]
      )

      //  if (settingsResult.rows.length === 0) {
      //    continue // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      //   }

      const { showreminderscalls, showoverduenotification } =
        settingsResult.rows[0]

      const chatIdResult = await dbPool.query(
        'SELECT chat_id FROM telegramm_registrations_chat WHERE user_id = $1',
        [userId]
      )

      if (chatIdResult.rows.length > 0) {
        const chat_id = chatIdResult.rows[0].chat_id
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for (const reminder of userReminders) {
          // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π *******
          if (reminder.type_reminders === 'call') {
            if (!showreminderscalls) {
              continue
            }
            let message = `üóìÔ∏è  ‚ö†Ô∏è *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:* ‚ö†Ô∏è\n
            –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å: ${new Date(reminder.date_time).toLocaleString(
              'ru-RU'
            )} 
             –°–æ–æ–±—â–µ–Ω–∏–µ: ${reminder.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'} 
           `
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.sendMessage(chat_id, message)
          }

          // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∏—Å—Ç–µ–∫—à–∏—Ö —Å—Ä–æ–∫–æ–≤ *******
          if (excludedTypes.includes(reminder.type_reminders)) {
            await notifySupervisor(bot, dbPool, userId, reminder)
            if (!showoverduenotification) {
              continue
            }

            let message = `‚ö†Ô∏è *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–∏–ª–µ—Ä–∞!* ‚ö†Ô∏è
            –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${reminder.title}
            –°–æ–æ–±—â–µ–Ω–∏–µ: ${reminder.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}
            
            ‚è∞ *–í–∞–∂–Ω–æ:* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.
            `
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.sendMessage(chat_id, message)
          }
        }
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error)
  }
}

// –ë—ã—Å—Ç—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
async function sendGroupCreationNotification(
  bot,
  dbPool,
  participantIds,
  groupData
) {
  try {
    const promises = participantIds.map(async (userId) => {
      const userChatIdResult = await dbPool.query(
        'SELECT chat_id FROM telegramm_registrations_chat WHERE user_id = $1',
        [userId]
      )

      const formatDate = (dateString) => {
        const date = new Date(dateString)
        return date.toLocaleString('ru-RU', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit',
        })
      }

      // –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞—Ç–µ–ª—è –≥—Ä—É–ø–ø—ã
      const creatorResult = await dbPool.query(
        'SELECT first_name, last_name, middle_name FROM users WHERE id = $1',
        [groupData.created_by]
      )

      let creatorName = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–æ–∑–¥–∞—Ç–µ–ª—å'
      if (creatorResult.rows.length > 0) {
        const { first_name, last_name, middle_name } = creatorResult.rows[0]
        creatorName = `${last_name} ${first_name} ${middle_name || ''}`.trim()
      }

      if (userChatIdResult.rows.length > 0) {
        const chatId = userChatIdResult.rows[0].chat_id
        if (groupData.create_type === 'range') {
          rangeMes = `
        üì£ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!**
        –í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É "${groupData.group_name}". 
        –û–ø–∏—Å–∞–Ω–∏–µ: ${groupData.description} 
        –°–æ–∑–¥–∞—Ç–µ–ª—å: ${creatorName}
        –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å.
        –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ BPM, –≤–∫–ª–∞–¥–∫–∞ "–†–∞–±–æ—á–∏–µ –≥—Ä—É–ø–ø—ã"
        –í–∞–∂–Ω–æ—Å—Ç—å: ${groupData.importance} 
      `
        }
        if (groupData.create_type === 'fixed') {
          rangeMes = `
        üì£ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!**
        –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã "${groupData.group_name}". 
        –û–ø–∏—Å–∞–Ω–∏–µ: ${groupData.description} 
        –°–æ–∑–¥–∞—Ç–µ–ª—å: ${creatorName}
        –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—É—é –¥–∞—Ç—É:
        ${formatDate(groupData.selected_date)}  
        –í–∞–∂–Ω–æ—Å—Ç—å: ${groupData.importance} 
      `
        }
        if (groupData.create_type === 'cancel') {
          rangeMes = `
        üì£ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –û–¢–ú–ï–ù–ï —Å–æ–≤–µ—â–∞–Ω–∏—è!**
        –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã "${groupData.group_name}". 
        –û–ø–∏—Å–∞–Ω–∏–µ: ${groupData.description} 
        –°–æ–∑–¥–∞—Ç–µ–ª—å: ${creatorName}
        –í—Å—Ç—Ä–µ—á–∞ –ø–æ –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ –Ω–∞ ${formatDate(groupData.selected_date)}  
        –±—ã–ª–∞ **–û–¢–ú–ï–ù–ï–ù–ê**! ‚ùå  
      `
        }

        if (groupData.create_type === 'complect') {
          rangeMes = `
        üì£ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!**
        –í—ã –±—ã–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã "${groupData.group_name}". 
        –û–ø–∏—Å–∞–Ω–∏–µ: ${groupData.description} 
        –°–æ–∑–¥–∞—Ç–µ–ª—å: ${creatorName}
        –° –¥–∞–Ω–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π! ‚úÖ  
      `
        }

        const message = rangeMes

        await bot.sendMessage(chatId, message)
      }
    })

    await Promise.all(promises)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:', error)
  }
}

module.exports = {
  sendMissedCallNotifications,
  sendReminderNotifications,
  sendGroupCreationNotification,
}
